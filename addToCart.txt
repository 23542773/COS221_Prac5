private function handleAddToCart($data) {
    $requiredFields = ['apikey', 'PID', 'Quantity'];
    foreach ($requiredFields as $field) {
        if (!isset($data[$field])) {
            throw new Exception("$field is required", 400);
        }
    }

    $apiKey = $data['apikey'];
    $productId = (int)$data['PID'];
    $quantity = (int)$data['Quantity'];

    if ($quantity <= 0) {
        throw new Exception("Quantity must be greater than 0", 400);
    }

    try {
        // Verify user exists
        $stmt = $this->db->prepare("SELECT 1 FROM users WHERE API_Key = ?");
        $stmt->execute([$apiKey]);
        if (!$stmt->fetch()) {
            throw new Exception("Invalid user API key", 401);
        }

        $stmt = $this->db->prepare("SELECT Name FROM products WHERE ProductID = ?");
        $stmt->execute([$productId]);
        $product = $stmt->fetch();
        if (!$product) {
            throw new Exception("Product not found", 404);
        }

        $stmt = $this->db->prepare("SELECT SUM(remaining) as available FROM listings WHERE ProductID = ?");
        $stmt->execute([$productId]);
        $available = $stmt->fetch()['available'];
        
        if ($available < $quantity) {
            throw new Exception("Not enough stock available (only $available left)", 400);
        }

        $stmt = $this->db->prepare("SELECT Quantity FROM cart WHERE K = ? AND PID = ?");
        $stmt->execute([$apiKey, $productId]);
        $existingItem = $stmt->fetch();

        if ($existingItem) {
            // Verify updated quantity doesn't exceed available stock
            $newQuantity = $existingItem['Quantity'] + $quantity;
            if ($newQuantity > $available) {
                throw new Exception("Cannot add $quantity items (would exceed available stock)", 400);
            }
            
            $stmt = $this->db->prepare("UPDATE cart SET Quantity = ? WHERE K = ? AND PID = ?");
            $stmt->execute([$newQuantity, $apiKey, $productId]);
            $message = "Cart item quantity updated";
        } else {
            $stmt = $this->db->prepare("INSERT INTO cart (K, PID, Quantity) VALUES (?, ?, ?)");
            $stmt->execute([$apiKey, $productId, $quantity]);
            $message = "Item added to cart";
        }

        $stmt = $this->db->prepare("SELECT c.PID, p.Name, c.Quantity, p.Thumbnail 
                                   FROM cart c 
                                   JOIN products p ON c.PID = p.ProductID 
                                   WHERE c.K = ?");
        $stmt->execute([$apiKey]);
        $cartItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $this->sendSuccess([
            'message' => $message,
            'cartItem' => [
                'PID' => $productId,
                'Name' => $product['Name'],
                'Quantity' => $existingItem ? $newQuantity : $quantity
            ],
            'cartItems' => $cartItems,
            'cartCount' => count($cartItems)
        ]);

    } catch (PDOException $e) {
        throw new Exception("Database error: " . $e->getMessage(), 500);
    }
}